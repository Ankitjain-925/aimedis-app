import { profiles } from "../home/profiles"

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

model worlds {
  id          String    @id @default(uuid())
  name        String
  description String?
  logo_url    String?
  tenants     tenants[]
  server      servers[]
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt

  @@schema("public")
}

model servers {
  id               String     @id @default(uuid())
  name             String
  description      String?
  ip_address       String
  max_member_count Int?
  world            worlds?    @relation(fields: [world_id], references: [id])
  world_id         String?    @unique
  building         buildings? @relation(fields: [building_id], references: [id])
  building_id      String?    @unique
  created_at       DateTime   @default(now())
  updated_at       DateTime   @updatedAt

  @@schema("public")
}

model tenants {
  id              String        @id @default(uuid())
  name            String
  world_id        String?
  worlds          worlds?       @relation(fields: [world_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  description     String?
  logo_url        String?
  subdomain       String?
  custom_domain   String?
  billing_address String?
  buildings       buildings[]
  created_at      DateTime      @default(now())
  updated_at      DateTime      @updatedAt
  memberships     memberships[]

  @@schema("public")
}

model roles {
  id          String        @id @default(uuid())
  name        role[]
  created_at  DateTime      @default(now())
  updated_at  DateTime      @updatedAt
  memberships memberships[]

  @@schema("public")
}

enum role {
  owner
  member
  moderator

  @@schema("public")
}

model buildings {
  id          String        @id @default(uuid())
  name        String
  tenant_id   String?
  tenants     tenants?      @relation(fields: [tenant_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  description String?
  image       String?
  nft_id      Int?
  metadata    Json?
  memberships memberships[]
  server      servers[]
  server_id   String?       @unique
  created_at  DateTime      @default(now())
  updated_at  DateTime      @updatedAt
  rooms       rooms[]

  @@schema("public")
}

model memberships {
  id          String     @id @default(uuid())
  name        String
  tenant_id   String?
  tenants     tenants?   @relation(fields: [tenant_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  building_id String?
  buildings   buildings? @relation(fields: [building_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  profile_id  String?    @db.Uuid
  profiles    profiles?  @relation(fields: [profile_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  role_id     String?
  roles       roles?     @relation(fields: [role_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  description String?
  image       String?
  nft_id      Int?
  metadata    Json?
  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt

  @@schema("public")
}

model rooms {
  id           String       @id @default(uuid())
  name         String
  building_id  String?
  buildings    buildings?   @relation(fields: [building_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  description  String?
  type         room_types
  availability Boolean?
  created_at   DateTime     @default(now())
  updated_at   DateTime     @updatedAt
  activities   activities[]

  @@schema("public")
}

enum room_types {
  public
  private
  closed

  @@schema("public")
}

model activities {
  id          String         @id @default(uuid())
  name        String
  room_id     String?
  rooms       rooms?         @relation(fields: [room_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  description String?
  image       String?
  type        activity_types
  start_time  DateTime
  end_time    DateTime
  created_at  DateTime       @default(now())
  updated_at  DateTime       @updatedAt
  channels    channels?

  @@schema("public")
}

enum activity_types {
  event
  appointment

  @@schema("public")
}

model channels {
  id          String     @id @default(uuid())
  name        String
  activity_id String     @unique
  activities  activities @relation(fields: [activity_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  description String
  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt

  @@schema("public")
}
