import { profiles } from "../home/profiles"

generator client {
  provider = "prisma-client-js"
}

model worlds {
  id          String      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name        String
  description String?
  logo_url    String?
  tenants     tenants[]
  buildings   buildings[]
  servers     servers[]
  created_at  DateTime    @default(now())
  updated_at  DateTime?   @updatedAt
}

model servers {
  id               String     @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name             String
  description      String?
  ip_address       String?
  max_member_count Int?
  world            worlds?    @relation(fields: [world_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  world_id         String?    @db.Uuid
  building         buildings? @relation(fields: [building_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  building_id      String?    @db.Uuid
  room             rooms?     @relation(fields: [room_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  room_id          String?    @db.Uuid
  created_at       DateTime   @default(now())
  updated_at       DateTime?  @updatedAt
}

model tenants {
  id              String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name            String
  world_id        String?       @db.Uuid
  worlds          worlds?       @relation(fields: [world_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  description     String?
  logo_url        String?
  subdomain       String?
  custom_domain   String?
  billing_address String?
  buildings       buildings[]
  created_at      DateTime      @default(now())
  updated_at      DateTime?     @updatedAt
  memberships     memberships[]
}

model tenant_roles {
  id          Int           @id @default(autoincrement())
  name        String
  created_at  DateTime      @default(now())
  updated_at  DateTime?     @updatedAt
  memberships memberships[]
}

model buildings {
  id          String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name        String
  tenant_id   String?       @db.Uuid
  tenants     tenants?      @relation(fields: [tenant_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  world_id    String?       @db.Uuid
  worlds      worlds?       @relation(fields: [world_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  description String?
  image       String?
  nft_id      Int?
  metadata    Json?
  memberships memberships[]
  server      servers[]
  created_at  DateTime      @default(now())
  updated_at  DateTime?     @updatedAt
  rooms       rooms[]
}

model memberships {
  id          String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name        String
  tenant_id   String?       @db.Uuid
  tenants     tenants?      @relation(fields: [tenant_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  building_id String?       @db.Uuid
  buildings   buildings?    @relation(fields: [building_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  profile_id  String?       @db.Uuid
  profiles    profiles?     @relation(fields: [profile_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  role_id     Int?
  roles       tenant_roles? @relation(fields: [role_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  description String?
  image       String?
  nft_id      Int?
  metadata    Json?
  created_at  DateTime      @default(now())
  updated_at  DateTime?     @updatedAt
}

model room_types {
  id         Int       @id @default(autoincrement())
  type       String
  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt
  rooms      rooms[]
}

model rooms {
  id           String       @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name         String
  building_id  String?      @db.Uuid
  buildings    buildings?   @relation(fields: [building_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  description  String?
  room_type_id Int?
  room_types   room_types?  @relation(fields: [room_type_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  availability Boolean?
  created_at   DateTime     @default(now())
  updated_at   DateTime?    @updatedAt
  activities   activities[]
  servers      servers[]
}

model activities {
  id               String         @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name             String
  room_id          String?        @db.Uuid
  rooms            rooms?         @relation(fields: [room_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  description      String?
  image            String?
  activity_type_id Int
  activity_types   activity_types @relation(fields: [activity_type_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  start_time       DateTime
  end_time         DateTime
  channels         channels?
  created_at       DateTime       @default(now())
  updated_at       DateTime?      @updatedAt
}

model activity_types {
  id         Int          @id @default(autoincrement())
  type       String
  activities activities[]
  created_at DateTime     @default(now())
  updated_at DateTime?    @updatedAt
}

model channels {
  id            String          @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  activity_id   String?         @unique @db.Uuid
  activities    activities?     @relation(fields: [activity_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  connection_id String?         @unique @db.Uuid
  connections   connections?    @relation(fields: [connection_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  group_id      String?         @unique @db.Uuid
  groups        groups?         @relation(fields: [group_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  description   String?
  host_phrase   String?
  joinee_phrase String?
  text_channel  String?
  chat_messages chat_messages[]
  created_at    DateTime        @default(now())
  updated_at    DateTime?       @updatedAt
}

model connections {
  id          String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  status      String    @default("pending")
  sender      profiles? @relation("sender", fields: [sender_id], references: [id])
  sender_id   String?   @db.Uuid
  reciever    profiles? @relation("reciever", fields: [reciever_id], references: [id])
  reciever_id String?   @db.Uuid
  channels    channels?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
}

model chat_messages {
  id              String                    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  message         String
  channels        channels                  @relation(fields: [channel_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  channel_id      String                    @db.Uuid
  posted_by       profiles                  @relation("posted", fields: [posted_by_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  posted_by_id    String                    @db.Uuid
  read_recipients message_read_recipients[]
  createdAt       DateTime                  @default(now())
  updatedAt       DateTime?                 @updatedAt
}

model message_read_recipients {
  id         String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  message    chat_messages @relation(fields: [message_id], references: [id])
  message_id String        @db.Uuid
  profiles   profiles      @relation(fields: [user_id], references: [id])
  user_id    String        @db.Uuid
  createdAt  DateTime      @default(now())
  updatedAt  DateTime?     @updatedAt
}

model groups {
  id        String               @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name      String
  members   group_participants[]
  channels  channels?
  createdAt DateTime             @default(now())
  updatedAt DateTime?            @updatedAt
}

model group_participants {
  id        String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  group     groups    @relation(fields: [group_id], references: [id])
  group_id  String    @db.Uuid
  profiles  profiles  @relation(fields: [user_id], references: [id])
  user_id   String    @db.Uuid
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}
