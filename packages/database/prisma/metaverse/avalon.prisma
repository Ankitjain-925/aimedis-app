import { profiles } from "../home/profiles"

generator client {
  provider = "prisma-client-js"
}

model worlds {
  id          String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name        String
  description String?
  logo_url    String?
  tenants     tenants[]
  servers     servers[]
  created_at  DateTime  @default(now())
  updated_at  DateTime? @updatedAt
}

model servers {
  id               String     @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name             String
  description      String?
  ip_address       String?
  max_member_count Int?
  world            worlds?    @relation(fields: [world_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  world_id         String?    @db.Uuid
  building         buildings? @relation(fields: [building_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  building_id      String?    @db.Uuid
  room             rooms?     @relation(fields: [room_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  room_id          String?    @db.Uuid
  created_at       DateTime   @default(now())
  updated_at       DateTime?  @updatedAt
}

model tenants {
  id              String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name            String
  world_id        String?       @db.Uuid
  worlds          worlds?       @relation(fields: [world_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  description     String?
  logo_url        String?
  subdomain       String?
  custom_domain   String?
  billing_address String?
  buildings       buildings[]
  created_at      DateTime      @default(now())
  updated_at      DateTime?     @updatedAt
  memberships     memberships[]
}

model tenant_roles {
  id          Int           @id @default(autoincrement())
  name        String
  created_at  DateTime      @default(now())
  updated_at  DateTime?     @updatedAt
  memberships memberships[]
}

model buildings {
  id          String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name        String
  tenant_id   String?       @db.Uuid
  tenants     tenants?      @relation(fields: [tenant_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  description String?
  image       String?
  nft_id      Int?
  metadata    Json?
  memberships memberships[]
  server      servers[]
  created_at  DateTime      @default(now())
  updated_at  DateTime?     @updatedAt
  rooms       rooms[]
}

model memberships {
  id          String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name        String
  tenant_id   String?       @db.Uuid
  tenants     tenants?      @relation(fields: [tenant_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  building_id String?       @db.Uuid
  buildings   buildings?    @relation(fields: [building_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  profile_id  String?       @db.Uuid
  profiles    profiles?     @relation(fields: [profile_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  role_id     Int?
  roles       tenant_roles? @relation(fields: [role_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  description String?
  image       String?
  nft_id      Int?
  metadata    Json?
  created_at  DateTime      @default(now())
  updated_at  DateTime?     @updatedAt
}

model rooms {
  id           String       @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name         String
  building_id  String?      @db.Uuid
  buildings    buildings?   @relation(fields: [building_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  description  String?
  type         room_types
  availability Boolean?
  created_at   DateTime     @default(now())
  updated_at   DateTime?    @updatedAt
  activities   activities[]
  servers      servers[]
}

enum room_types {
  public
  private
  closed
}

model activities {
  id          String         @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name        String
  room_id     String?        @db.Uuid
  rooms       rooms?         @relation(fields: [room_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  description String?
  image       String?
  type        activity_types
  start_time  DateTime
  end_time    DateTime
  created_at  DateTime       @default(now())
  updated_at  DateTime?      @updatedAt
  channels    channels?
}

enum activity_types {
  event
  appointment
}

model channels {
  id          String     @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name        String
  activity_id String     @unique @db.Uuid
  activities  activities @relation(fields: [activity_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  description String
  created_at  DateTime   @default(now())
  updated_at  DateTime?  @updatedAt
}
