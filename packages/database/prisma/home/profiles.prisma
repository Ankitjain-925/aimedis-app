import { memberships } from "..\metaverse\avalon"

generator client {
  provider = "prisma-client-js"
}

model profiles {
  id                       String          @id @db.Uuid
  created_at               DateTime        @default(now()) @db.Timestamptz(6)
  updated_at               DateTime        @default(now()) @db.Timestamptz(6)
  username                 String?         @unique
  email                    String?
  phone                    String?
  gender                   gender?
  mrmrs                    String?
  title                    String?
  firstname                String?
  middlename               String?
  lastname                 String?
  position                 String?
  avatar_photo_url         String?
  avatar_rpm_photo_url     String?
  avatar_rpm_half_body_url String?
  avatar_rpm_full_body_url String?
  bio                      String?
  memberships              memberships[]
  notification_sent        notifications[] @relation("actor")
  notification_recieved    notifications[] @relation("recipients")
  identities               user_identities[]
}

enum gender {
  male
  female
  other
}

model identities {
  id         String          @id @default(dbgenerated("uuid_generate_v1()")) @db.Uuid
  name       String
  users      user_identities[]
  created_at DateTime        @default(now())
  updated_at DateTime        @default(now()) @updatedAt
}

model user_identities {
  id          String   @id @default(dbgenerated("uuid_generate_v1()")) @db.Uuid
  user        profiles @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user_id     String   @db.Uuid
  identity    identities @relation(fields: [identity_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  identity_id String   @db.Uuid
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now()) @updatedAt
}

model entities {
  id            String          @id @db.Uuid
  app           app
  trigger_point String
  notifications notifications[]
}

model notifications {
  id            String     @id @db.Uuid
  actor         profiles   @relation("actor", fields: [actor_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  actor_id      String     @db.Uuid
  recipients    profiles[] @relation("recipients")
  recipient_ids String     @db.Uuid
  entity_id     String     @db.Uuid
  entities      entities   @relation(fields: [entity_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  message       String
  is_read       Boolean    @default(false)
  created_at    DateTime   @default(now())
  updated_at    DateTime   @updatedAt
}

enum app {
  admin
  care
  chat
  dapp
  exchange
  fhir
  health
  home
  metaverse
  store
  web
}

model invalidated_tokens {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  expire_at DateTime @default(now())
}
