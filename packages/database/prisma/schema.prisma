
generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["multiSchema"]
}
  
datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
    schemas  = ["auth", "public"]
}


//BEGIN prisma\home\supabase.prisma
// This is Supabase pre-defined schemas. Dont change anything in this file.



model audit_log_entries {
  instance_id String?   @db.Uuid
  id          String    @id @db.Uuid
  payload     Json?     @db.Json
  created_at  DateTime? @db.Timestamptz(6)
  ip_address  String    @default("") @db.VarChar(64)

  @@index([instance_id], map: "audit_logs_instance_id_idx")
  @@schema("auth")
}

model identities {
  id              String
  user_id         String    @db.Uuid
  identity_data   Json
  provider        String
  last_sign_in_at DateTime? @db.Timestamptz(6)
  created_at      DateTime? @db.Timestamptz(6)
  updated_at      DateTime? @db.Timestamptz(6)
  email           String?   @default(dbgenerated("lower((identity_data ->> 'email'::text))"))
  users           users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([provider, id])
  @@index([email])
  @@index([user_id])
  @@schema("auth")
}

model instances {
  id              String    @id @db.Uuid
  uuid            String?   @db.Uuid
  raw_base_config String?
  created_at      DateTime? @db.Timestamptz(6)
  updated_at      DateTime? @db.Timestamptz(6)

  @@schema("auth")
}

model mfa_amr_claims {
  session_id            String   @db.Uuid
  created_at            DateTime @db.Timestamptz(6)
  updated_at            DateTime @db.Timestamptz(6)
  authentication_method String
  id                    String   @id(map: "amr_id_pk") @db.Uuid
  sessions              sessions @relation(fields: [session_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([session_id, authentication_method], map: "mfa_amr_claims_session_id_authentication_method_pkey")
  @@schema("auth")
}

model mfa_challenges {
  id          String      @id @db.Uuid
  factor_id   String      @db.Uuid
  created_at  DateTime    @db.Timestamptz(6)
  verified_at DateTime?   @db.Timestamptz(6)
  ip_address  String      @db.Inet
  mfa_factors mfa_factors @relation(fields: [factor_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "mfa_challenges_auth_factor_id_fkey")

  @@schema("auth")
}

model mfa_factors {
  id             String           @id @db.Uuid
  user_id        String           @db.Uuid
  friendly_name  String?
  factor_type    factor_type
  status         factor_status
  created_at     DateTime         @db.Timestamptz(6)
  updated_at     DateTime         @db.Timestamptz(6)
  secret         String?
  mfa_challenges mfa_challenges[]
  users          users            @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([user_id, created_at], map: "factor_id_created_at_idx")
  @@schema("auth")
}

model refresh_tokens {
  instance_id String?   @db.Uuid
  id          BigInt    @id @default(autoincrement())
  token       String?   @unique(map: "refresh_tokens_token_unique") @db.VarChar(255)
  user_id     String?   @db.VarChar(255)
  revoked     Boolean?
  created_at  DateTime? @db.Timestamptz(6)
  updated_at  DateTime? @db.Timestamptz(6)
  parent      String?   @db.VarChar(255)
  session_id  String?   @db.Uuid
  sessions    sessions? @relation(fields: [session_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([instance_id])
  @@index([instance_id, user_id])
  @@index([parent])
  @@index([session_id, revoked])
  @@index([token])
  @@schema("auth")
}

model saml_providers {
  id                String        @id @db.Uuid
  sso_provider_id   String        @db.Uuid
  entity_id         String        @unique
  metadata_xml      String
  metadata_url      String?
  attribute_mapping Json?
  created_at        DateTime?     @db.Timestamptz(6)
  updated_at        DateTime?     @db.Timestamptz(6)
  sso_providers     sso_providers @relation(fields: [sso_provider_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([sso_provider_id])
  @@schema("auth")
}

model saml_relay_states {
  id              String        @id @db.Uuid
  sso_provider_id String        @db.Uuid
  request_id      String
  for_email       String?
  redirect_to     String?
  from_ip_address String?       @db.Inet
  created_at      DateTime?     @db.Timestamptz(6)
  updated_at      DateTime?     @db.Timestamptz(6)
  sso_providers   sso_providers @relation(fields: [sso_provider_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([for_email])
  @@index([sso_provider_id])
  @@schema("auth")
}

model schema_migrations {
  version String @id @db.VarChar(255)

  @@schema("auth")
}

model sessions {
  id             String           @id @db.Uuid
  user_id        String           @db.Uuid
  created_at     DateTime?        @db.Timestamptz(6)
  updated_at     DateTime?        @db.Timestamptz(6)
  factor_id      String?          @db.Uuid
  aal            aal_level?
  not_after      DateTime?        @db.Timestamptz(6)
  mfa_amr_claims mfa_amr_claims[]
  refresh_tokens refresh_tokens[]
  users          users            @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([user_id])
  @@index([user_id, created_at], map: "user_id_created_at_idx")
  @@schema("auth")
}

model sso_domains {
  id              String        @id @db.Uuid
  sso_provider_id String        @db.Uuid
  domain          String
  created_at      DateTime?     @db.Timestamptz(6)
  updated_at      DateTime?     @db.Timestamptz(6)
  sso_providers   sso_providers @relation(fields: [sso_provider_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([sso_provider_id])
  @@schema("auth")
}

model sso_providers {
  id                String              @id @db.Uuid
  resource_id       String?
  created_at        DateTime?           @db.Timestamptz(6)
  updated_at        DateTime?           @db.Timestamptz(6)
  saml_providers    saml_providers[]
  saml_relay_states saml_relay_states[]
  sso_domains       sso_domains[]

  @@schema("auth")
}

model users {
  instance_id                 String?       @db.Uuid
  id                          String        @id @db.Uuid
  aud                         String?       @db.VarChar(255)
  role                        String?       @db.VarChar(255)
  email                       String?       @db.VarChar(255)
  encrypted_password          String?       @db.VarChar(255)
  email_confirmed_at          DateTime?     @db.Timestamptz(6)
  invited_at                  DateTime?     @db.Timestamptz(6)
  confirmation_token          String?       @db.VarChar(255)
  confirmation_sent_at        DateTime?     @db.Timestamptz(6)
  recovery_token              String?       @db.VarChar(255)
  recovery_sent_at            DateTime?     @db.Timestamptz(6)
  email_change_token_new      String?       @db.VarChar(255)
  email_change                String?       @db.VarChar(255)
  email_change_sent_at        DateTime?     @db.Timestamptz(6)
  last_sign_in_at             DateTime?     @db.Timestamptz(6)
  raw_app_meta_data           Json?
  raw_user_meta_data          Json?
  is_super_admin              Boolean?
  created_at                  DateTime?     @db.Timestamptz(6)
  updated_at                  DateTime?     @db.Timestamptz(6)
  phone                       String?       @unique @db.VarChar(15)
  phone_confirmed_at          DateTime?     @db.Timestamptz(6)
  phone_change                String?       @default("") @db.VarChar(15)
  phone_change_token          String?       @default("") @db.VarChar(255)
  phone_change_sent_at        DateTime?     @db.Timestamptz(6)
  confirmed_at                DateTime?     @default(dbgenerated("LEAST(email_confirmed_at, phone_confirmed_at)")) @db.Timestamptz(6)
  email_change_token_current  String?       @default("") @db.VarChar(255)
  email_change_confirm_status Int?          @default(0) @db.SmallInt
  banned_until                DateTime?     @db.Timestamptz(6)
  reauthentication_token      String?       @default("") @db.VarChar(255)
  reauthentication_sent_at    DateTime?     @db.Timestamptz(6)
  is_sso_user                 Boolean       @default(false)
  identities                  identities[]
  mfa_factors                 mfa_factors[]
  sessions                    sessions[]

  @@index([instance_id])
  @@schema("auth")
}

enum aal_level {
  aal1
  aal2
  aal3

  @@schema("auth")
}

enum factor_status {
  unverified
  verified

  @@schema("auth")
}

enum factor_type {
  totp
  webauthn

  @@schema("auth")
}

//END prisma\home\supabase.prisma


//BEGIN prisma\metaverse\avalon.prisma



model worlds {
  id          String    @id @default(uuid())
  name        String
  description String?
  logo_url    String?
  tenants     tenants[]
  server      servers[]
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt

  @@schema("public")
}

model servers {
  id               String     @id @default(uuid())
  name             String
  description      String?
  ip_address       String
  max_member_count Int?
  world            worlds?    @relation(fields: [world_id], references: [id])
  world_id         String?    @unique
  building         buildings? @relation(fields: [building_id], references: [id])
  building_id      String?    @unique
  created_at       DateTime   @default(now())
  updated_at       DateTime   @updatedAt

  @@schema("public")
}

model tenants {
  id              String        @id @default(uuid())
  name            String
  world_id        String?
  worlds          worlds?       @relation(fields: [world_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  description     String?
  logo_url        String?
  subdomain       String?
  custom_domain   String?
  billing_address String?
  buildings       buildings[]
  created_at      DateTime      @default(now())
  updated_at      DateTime      @updatedAt
  memberships     memberships[]

  @@schema("public")
}

model roles {
  id          String        @id @default(uuid())
  name        role[]
  created_at  DateTime      @default(now())
  updated_at  DateTime      @updatedAt
  memberships memberships[]

  @@schema("public")
}

enum role {
  owner
  member
  moderator

  @@schema("public")
}

model buildings {
  id          String        @id @default(uuid())
  name        String
  tenant_id   String?
  tenants     tenants?      @relation(fields: [tenant_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  description String?
  image       String?
  nft_id      Int?
  metadata    Json?
  memberships memberships[]
  server      servers[]
  server_id   String?       @unique
  created_at  DateTime      @default(now())
  updated_at  DateTime      @updatedAt
  rooms       rooms[]

  @@schema("public")
}

model memberships {
  id          String     @id @default(uuid())
  name        String
  tenant_id   String?
  tenants     tenants?   @relation(fields: [tenant_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  building_id String?
  buildings   buildings? @relation(fields: [building_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  profile_id  String?    @db.Uuid
  profiles    profiles?  @relation(fields: [profile_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  role_id     String?
  roles       roles?     @relation(fields: [role_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  description String?
  image       String?
  nft_id      Int?
  metadata    Json?
  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt

  @@schema("public")
}

model rooms {
  id           String       @id @default(uuid())
  name         String
  building_id  String?
  buildings    buildings?   @relation(fields: [building_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  description  String?
  type         room_types
  availability Boolean?
  created_at   DateTime     @default(now())
  updated_at   DateTime     @updatedAt
  activities   activities[]

  @@schema("public")
}

enum room_types {
  public
  private
  closed

  @@schema("public")
}

model activities {
  id          String         @id @default(uuid())
  name        String
  room_id     String?
  rooms       rooms?         @relation(fields: [room_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  description String?
  image       String?
  type        activity_types
  start_time  DateTime
  end_time    DateTime
  created_at  DateTime       @default(now())
  updated_at  DateTime       @updatedAt
  channels    channels?

  @@schema("public")
}

enum activity_types {
  event
  appointment

  @@schema("public")
}

model channels {
  id          String     @id @default(uuid())
  name        String
  activity_id String     @unique
  activities  activities @relation(fields: [activity_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  description String
  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt

  @@schema("public")
}

//END prisma\metaverse\avalon.prisma


//BEGIN prisma\home\profiles.prisma



model profiles {
  id                       String          @id @db.Uuid
  created_at               DateTime        @default(now()) @db.Timestamptz(6)
  updated_at               DateTime        @default(now()) @db.Timestamptz(6)
  username                 String?         @unique
  email                    String?
  phone                    String?
  gender                   gender?
  mrmrs                    String?
  title                    String?
  firstname                String?
  middlename               String?
  lastname                 String?
  position                 String?
  avatar_photo_url         String?
  avatar_rpm_photo_url     String?
  avatar_rpm_half_body_url String?
  avatar_rpm_full_body_url String?
  bio                      String?
  memberships              memberships[]
  notification_sent        notifications[] @relation("actor")
  notification_recieved    notifications[] @relation("recipients")

  @@schema("public")
}



enum gender {
  male
  female
  other

  @@schema("public")
}

model entities {
  id String   @id @db.Uuid
  app           app 
  trigger_point String
  notifications notifications[] 
  
  @@schema("public")
}

model notifications {
  id            String   @id @db.Uuid
  actor         profiles @relation("actor", fields: [actor_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  actor_id      String   @db.Uuid
  recipients    profiles[] @relation("recipients")
  recipient_ids String @db.Uuid
  entity_id     String @db.Uuid
  entities      entities @relation(fields: [entity_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  message       String
  is_read       Boolean  @default(false)
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  @@schema("public")
}

enum app {
  admin
  care
  chat
  dapp
  exchange
  fhir
  health
  home
  metaverse
  store
  web

  @@schema("public")
}


model invalidated_tokens  {
  id         Int      @id @default(autoincrement())
  token      String   @unique
  expire_at  DateTime @default(now())

  @@schema("public")

}




//END prisma\home\profiles.prisma


//BEGIN prisma\health\patient_information.prisma


model patient_information {
  id  String   @id @db.Uuid

  @@schema("public")
}
//END prisma\health\patient_information.prisma


//BEGIN prisma\fhir\patient.prisma



model fhir_patient {
  id            String   @unique
  txid          Int
  ts            DateTime @default(now()) @db.Timestamptz(6)
  resource_type String   @default("Patient")
  //status resource_status not null
  resource      Json

  //created_user_id profiles @relation(fields: [id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  //updated_user_id profiles @relation(fields: [id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@schema("public")
}

//END prisma\fhir\patient.prisma
