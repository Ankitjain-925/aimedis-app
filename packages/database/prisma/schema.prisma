
generator client {
    provider        = "prisma-client-js"
}
  
datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}


//BEGIN prisma\home\profiles.prisma



model profiles {
  id                       String            @id @db.Uuid
  created_at               DateTime          @default(now()) @db.Timestamptz(6)
  updated_at               DateTime          @default(now()) @db.Timestamptz(6)
  username                 String?           @unique
  email                    String?
  phone                    String?
  gender                   gender?
  mrmrs                    String?
  title                    String?
  firstname                String?
  middlename               String?
  lastname                 String?
  position                 String?
  avatar_photo_url         String?
  avatar_rpm_photo_url     String?
  avatar_rpm_half_body_url String?
  avatar_rpm_full_body_url String?
  bio                      String?
  memberships              memberships[]
  notification_sent        notifications[]   @relation("actor")
  notification_recieved    notifications[]   @relation("recipients")
  identities               user_identities[]
}

enum gender {
  male
  female
  other
}

model identities {
  id         Int               @id @default(autoincrement())
  name       String
  users      user_identities[]
  created_at DateTime          @default(now())
  updated_at DateTime?         @updatedAt
}

model user_identities {
  id          String     @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user        profiles   @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user_id     String     @db.Uuid
  identity    identities @relation(fields: [identity_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  identity_id Int
  created_at  DateTime   @default(now())
  updated_at  DateTime?  @updatedAt
}

model entities {
  id            String          @id @db.Uuid
  app           app
  trigger_point String
  notifications notifications[]
}

model notifications {
  id            String     @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  actor         profiles   @relation("actor", fields: [actor_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  actor_id      String     @db.Uuid
  recipients    profiles[] @relation("recipients")
  recipient_ids String     @db.Uuid
  entity_id     String     @db.Uuid
  entities      entities   @relation(fields: [entity_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  message       String
  is_read       Boolean    @default(false)
  created_at    DateTime   @default(now())
  updated_at    DateTime?  @updatedAt
}

enum app {
  admin
  care
  chat
  dapp
  exchange
  fhir
  health
  home
  metaverse
  store
  web
}

model invalidated_tokens {
  id         String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  token      String    @unique
  expire_at  DateTime  @default(now())
  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt
}

//END prisma\home\profiles.prisma


//BEGIN prisma\health\patient_information.prisma


model patient_information {
  id String @id @db.Uuid
}

//END prisma\health\patient_information.prisma


//BEGIN prisma\metaverse\avalon.prisma



model worlds {
  id          String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name        String
  description String?
  logo_url    String?
  tenants     tenants[]
  servers     servers[]
  created_at  DateTime  @default(now())
  updated_at  DateTime? @updatedAt
}

model servers {
  id               String     @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name             String
  description      String?
  ip_address       String?
  max_member_count Int?
  world            worlds?    @relation(fields: [world_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  world_id         String?    @db.Uuid
  building         buildings? @relation(fields: [building_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  building_id      String?    @db.Uuid
  room             rooms?     @relation(fields: [room_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  room_id          String?    @db.Uuid
  created_at       DateTime   @default(now())
  updated_at       DateTime?  @updatedAt
}

model tenants {
  id              String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name            String
  world_id        String?       @db.Uuid
  worlds          worlds?       @relation(fields: [world_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  description     String?
  logo_url        String?
  subdomain       String?
  custom_domain   String?
  billing_address String?
  buildings       buildings[]
  created_at      DateTime      @default(now())
  updated_at      DateTime?     @updatedAt
  memberships     memberships[]
}

model tenant_roles {
  id          Int           @id @default(autoincrement())
  name        String
  created_at  DateTime      @default(now())
  updated_at  DateTime?     @updatedAt
  memberships memberships[]
}

model buildings {
  id          String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name        String
  tenant_id   String?       @db.Uuid
  tenants     tenants?      @relation(fields: [tenant_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  description String?
  image       String?
  nft_id      Int?
  metadata    Json?
  memberships memberships[]
  server      servers[]
  created_at  DateTime      @default(now())
  updated_at  DateTime?     @updatedAt
  rooms       rooms[]
}

model memberships {
  id          String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name        String
  tenant_id   String?       @db.Uuid
  tenants     tenants?      @relation(fields: [tenant_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  building_id String?       @db.Uuid
  buildings   buildings?    @relation(fields: [building_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  profile_id  String?       @db.Uuid
  profiles    profiles?     @relation(fields: [profile_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  role_id     Int?
  roles       tenant_roles? @relation(fields: [role_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  description String?
  image       String?
  nft_id      Int?
  metadata    Json?
  created_at  DateTime      @default(now())
  updated_at  DateTime?     @updatedAt
}

model rooms {
  id           String       @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name         String
  building_id  String?      @db.Uuid
  buildings    buildings?   @relation(fields: [building_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  description  String?
  type         room_types
  availability Boolean?
  created_at   DateTime     @default(now())
  updated_at   DateTime?    @updatedAt
  activities   activities[]
  servers      servers[]
}

enum room_types {
  public
  private
  closed
}

model activities {
  id          String         @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name        String
  room_id     String?        @db.Uuid
  rooms       rooms?         @relation(fields: [room_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  description String?
  image       String?
  type        activity_types
  start_time  DateTime
  end_time    DateTime
  created_at  DateTime       @default(now())
  updated_at  DateTime?      @updatedAt
  channels    channels?
}

enum activity_types {
  event
  appointment
}

model channels {
  id          String     @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name        String
  activity_id String     @unique @db.Uuid
  activities  activities @relation(fields: [activity_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  description String
  created_at  DateTime   @default(now())
  updated_at  DateTime?  @updatedAt
}

//END prisma\metaverse\avalon.prisma


//BEGIN prisma\fhir\patient.prisma



model fhir_patient {
  id            String   @unique
  txid          Int
  ts            DateTime @default(now()) @db.Timestamptz(6)
  resource_type String   @default("Patient")
  //status resource_status not null
  resource      Json

  //created_user_id profiles @relation(fields: [id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  //updated_user_id profiles @relation(fields: [id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

//END prisma\fhir\patient.prisma
